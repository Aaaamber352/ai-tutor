<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Athena Learning Platform</title>
    <!-- Include Chart.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        /* CSS Code */
        /* [Include your existing CSS code here] */
        /* For brevity, the CSS code is not repeated */
    </style>
</head>
<body>
    <!-- HTML Code -->
    <div class="container">
        <!-- Login Form -->
        <div id="loginForm" class="card">
            <h2 style="margin-bottom: 20px;">Athena Learning Platform</h2>
            <div class="form-group">
                <label>Username</label>
                <input type="text" id="username" placeholder="Enter username">
            </div>
            <div class="form-group">
                <label>Password</label>
                <input type="password" id="password" placeholder="Enter password">
            </div>
            <button class="btn" onclick="login()">Login</button>
            <div class="quote fade-in-out" id="loginQuote"></div>
        </div>

        <!-- Teacher Dashboard -->
        <div id="teacherDashboard" class="hidden">
            <div class="header">
                <h2>Athena Teacher Dashboard</h2>
                <button class="btn btn-secondary" onclick="logout()">Logout</button>
            </div>
            <div id="teacherContent">
                <div class="card">
                    <h3>Create Assignment</h3>
                    <div class="form-group">
                        <label>Select Skills</label>
                        <div id="skillsList"></div>
                    </div>
                    <div class="form-group">
                        <label>Due Date</label>
                        <input type="date" id="dueDate">
                    </div>
                    <button class="btn" onclick="createAssignment()">Create Assignment</button>
                </div>
                <div class="card">
                    <h3>Assignments</h3>
                    <div id="assignmentsList"></div>
                </div>
                <div class="card">
                    <h3>Student Submissions</h3>
                    <div id="studentSubmissions"></div>
                </div>
                <div class="card">
                    <h3>Class Averages</h3>
                    <div id="classAverages"></div>
                </div>
            </div>
        </div>

        <!-- Student Dashboard -->
        <div id="studentDashboard" class="hidden">
            <div class="header">
                <h2>Athena Student Dashboard</h2>
                <button class="btn btn-secondary" onclick="logout()">Logout</button>
            </div>
            <!-- Student Content -->
            <div id="studentContent">
                <div class="card">
                    <h3>Your Assignments</h3>
                    <div id="studentAssignmentsList"></div>
                </div>
                <!-- Project Ideas Section -->
                <div id="projectIdeasSection" class="hidden">
                    <div class="card">
                        <h3>Enter Your Topic</h3>
                        <div class="form-group">
                            <label>Topic</label>
                            <input type="text" id="studentTopic" placeholder="Enter your topic">
                        </div>
                        <button class="btn" onclick="generateProjects()">Generate Project Ideas</button>
                    </div>
                </div>
                <!-- Display Generated Projects -->
                <div id="displayProjectsSection" class="hidden">
                    <div class="card">
                        <h3>Project Ideas</h3>
                        <div id="projectsList"></div>
                    </div>
                </div>
                <!-- Selected Project -->
                <div id="selectedProjectSection" class="hidden">
                    <div class="card">
                        <h3>Your Selected Project</h3>
                        <div id="selectedProject"></div>
                    </div>
                </div>
                <!-- Student Average Grade -->
                <div class="card">
                    <h3>Your Average Grade</h3>
                    <div id="studentAverageGrade"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // JavaScript Code

        // Sample data (in a real app, this would come from a backend)
        const users = {
            'teacher1': { password: 'pass123', role: 'teacher' },
            'student1': { password: 'pass123', role: 'student' },
            'student2': { password: 'pass123', role: 'student' },
            'student3': { password: 'pass123', role: 'student' }
        };

        const skills = [
            'Creative Writing',
            'Research Skills',
            'Critical Thinking',
            'Analysis',
            'Communication',
            'Problem Solving'
        ];

        const quotes = [
            'Education is the passport to the future, for tomorrow belongs to those who prepare for it today. - Malcolm X',
            'The beautiful thing about learning is that no one can take it away from you. - B.B. King',
            'The purpose of education is to replace an empty mind with an open one. - Malcolm Forbes',
            'The mind is not a vessel to be filled but a fire to be ignited. - Plutarch',
            'Education is not preparation for life; education is life itself. - John Dewey'
        ];

        const gradeBoundaries = [
            { grade: 'A*', minScore: 90 },
            { grade: 'A', minScore: 80 },
            { grade: 'B', minScore: 70 },
            { grade: 'C', minScore: 60 },
            { grade: 'D', minScore: 50 },
            { grade: 'E', minScore: 40 },
            { grade: 'F', minScore: 0 }
        ];

        let selectedSkills = [];
        let currentUser = null;
        let assignments = [];
        let selectedAssignment = null;
        let studentProjects = {}; // Store student's selected projects and submissions
        let studentSubmissions = {}; // For teacher to view student submissions

        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (users[username] && users[username].password === password) {
                currentUser = username;
                document.getElementById('loginForm').classList.add('hidden');

                if (users[username].role === 'teacher') {
                    initializeTeacherDashboard();
                } else {
                    initializeStudentDashboard();
                }
            } else {
                alert('Invalid credentials');
            }
        }

        function logout() {
            currentUser = null;
            document.getElementById('teacherDashboard').classList.add('hidden');
            document.getElementById('studentDashboard').classList.add('hidden');
            document.getElementById('loginForm').classList.remove('hidden');
        }

        function initializeSkillsList() {
            const skillsList = document.getElementById('skillsList');
            skillsList.innerHTML = skills.map(skill => 
                `<span class="badge" onclick="toggleSkill('${skill}')">${skill}</span>`
            ).join('');
        }

        function toggleSkill(skill) {
            const index = selectedSkills.indexOf(skill);
            if (index === -1) {
                selectedSkills.push(skill);
            } else {
                selectedSkills.splice(index, 1);
            }
            updateSkillBadges();
        }

        function updateSkillBadges() {
            document.querySelectorAll('.badge').forEach(badge => {
                if (selectedSkills.includes(badge.textContent)) {
                    badge.classList.add('selected');
                } else {
                    badge.classList.remove('selected');
                }
            });
        }

        function initializeTeacherDashboard() {
            document.getElementById('teacherDashboard').classList.remove('hidden');
            initializeSkillsList();
            displayAssignments();
            displayStudentSubmissions();
            displayClassAverages();
        }

        function createAssignment() {
            const dueDate = document.getElementById('dueDate').value;
            if (selectedSkills.length === 0 || !dueDate) {
                alert('Please select skills and due date');
                return;
            }
            const assignment = {
                id: assignments.length + 1,
                skills: [...selectedSkills],
                dueDate: dueDate
            };
            assignments.push(assignment);
            selectedSkills = [];
            updateSkillBadges();
            document.getElementById('dueDate').value = '';
            displayAssignments();
            alert('Assignment created successfully!');
        }

        function displayAssignments() {
            const assignmentsList = document.getElementById('assignmentsList');
            if (assignments.length === 0) {
                assignmentsList.innerHTML = '<p>No assignments created yet.</p>';
                return;
            }
            assignmentsList.innerHTML = assignments.map(assignment => `
                <div class="project-card">
                    <p><strong>Assignment ID:</strong> ${assignment.id}</p>
                    <p><strong>Skills:</strong> ${assignment.skills.join(', ')}</p>
                    <p><strong>Due Date:</strong> ${assignment.dueDate}</p>
                </div>
            `).join('');
        }

        function initializeStudentDashboard() {
            document.getElementById('studentDashboard').classList.remove('hidden');
            displayStudentAssignments();
            displaySelectedProject();
            displayStudentAverageGrade();
        }

        function displayStudentAssignments() {
            const studentAssignmentsList = document.getElementById('studentAssignmentsList');
            if (assignments.length === 0) {
                studentAssignmentsList.innerHTML = '<p>No assignments available at the moment.</p>';
                return;
            }
            studentAssignmentsList.innerHTML = assignments.map(assignment => `
                <div class="project-card">
                    <p><strong>Assignment ID:</strong> ${assignment.id}</p>
                    <p><strong>Skills:</strong> ${assignment.skills.join(', ')}</p>
                    <p><strong>Due Date:</strong> ${assignment.dueDate}</p>
                    ${studentProjects[currentUser] && studentProjects[currentUser].assignmentId === assignment.id ? 
                        '<p><em>Already Selected</em></p>' :
                        `<button class="btn" onclick="selectAssignment(${assignment.id})">Start Assignment</button>`
                    }
                </div>
            `).join('');
        }

        function selectAssignment(id) {
            selectedAssignment = assignments.find(a => a.id === id);
            document.getElementById('projectIdeasSection').classList.remove('hidden');
            document.getElementById('displayProjectsSection').classList.add('hidden');
            document.getElementById('studentTopic').value = '';
            window.scrollTo(0, document.body.scrollHeight);
        }

        function generateProjects() {
            const topic = document.getElementById('studentTopic').value;
            if (!topic) {
                alert('Please enter a topic');
                return;
            }
            const projectIdeas = generateProjectIdeas(topic);
            displayProjectIdeas(projectIdeas);
        }

        function generateProjectIdeas(topic) {
            const ideaTemplates = [
                `Write a creative short story involving ${topic}, focusing on character development and plot twists.`,
                `Develop a comprehensive research paper on ${topic}, including its historical context and future implications.`,
                `Create a multimedia presentation about ${topic}, utilizing visual aids and interactive elements.`,
                // [Add more templates as needed]
            ];

            // Randomly select three unique ideas
            const selectedIdeas = [];
            while (selectedIdeas.length < 3) {
                const randomIndex = Math.floor(Math.random() * ideaTemplates.length);
                const idea = ideaTemplates[randomIndex];
                if (!selectedIdeas.includes(idea)) {
                    selectedIdeas.push(idea);
                }
            }

            return selectedIdeas;
        }

        function displayProjectIdeas(ideas) {
            const projectsList = document.getElementById('projectsList');
            projectsList.innerHTML = ideas.map((idea, i) => `
                <div class="project-card">
                    <h3>Project Option ${i + 1}</h3>
                    <p>${idea}</p>
                    <button class="btn" onclick="selectProject(${i}, '${idea.replace(/'/g, "\\'")}')">Choose This Project</button>
                </div>
            `).join('');
            document.getElementById('displayProjectsSection').classList.remove('hidden');
            window.scrollTo(0, document.body.scrollHeight);
        }

        function selectProject(index, idea) {
            alert(`Project Option ${index + 1} selected!`);
            // Save the selected project for the student
            studentProjects[currentUser] = {
                assignmentId: selectedAssignment.id,
                projectIdea: idea,
                submission: '',
                status: 'pending',
                grade: null,
                comments: null
            };
            // Update the teacher's view of student submissions
            if (!studentSubmissions[selectedAssignment.id]) {
                studentSubmissions[selectedAssignment.id] = {};
            }
            studentSubmissions[selectedAssignment.id][currentUser] = studentProjects[currentUser];
            displaySelectedProject();
            displayStudentAssignments();
            displayStudentSubmissions();
            displayStudentAverageGrade();
            displayClassAverages();
            // Hide project ideas sections
            document.getElementById('projectIdeasSection').classList.add('hidden');
            document.getElementById('displayProjectsSection').classList.add('hidden');
            window.scrollTo(0, 0);
        }

        function displaySelectedProject() {
            const selectedProjectSection = document.getElementById('selectedProjectSection');
            if (studentProjects[currentUser]) {
                selectedProjectSection.classList.remove('hidden');
                const project = studentProjects[currentUser];
                selectedAssignment = assignments.find(a => a.id === project.assignmentId);
                const selectedProject = document.getElementById('selectedProject');
                selectedProject.innerHTML = `
                    <p><strong>Assignment ID:</strong> ${project.assignmentId}</p>
                    <p><strong>Project Idea:</strong> ${project.projectIdea}</p>
                    <p><strong>Status:</strong> <span class="${
                        project.status === 'submitted' ? 'status-submitted' : 
                        project.status === 'graded' ? 'status-graded' : 'status-pending'}">${
                            project.status === 'submitted' ? 'Submitted' : 
                            project.status === 'graded' ? 'Graded' : 'Pending'}</span></p>
                    ${project.grade !== null ? `<p><strong>Grade:</strong> ${project.grade}/100 (${getGradeLetter(project.grade)})</p>` : ''}
                    ${project.comments ? `<p><strong>Teacher's Comments:</strong> ${project.comments}</p>` : ''}
                    ${project.status !== 'graded' ? `<button class="btn" onclick="openSubmission()">Submit Project</button>` : ''}
                `;
            } else {
                selectedProjectSection.classList.add('hidden');
            }
        }

        function openSubmission() {
            const project = studentProjects[currentUser];
            const submission = prompt('Paste your project submission below:', project.submission || '');
            if (submission !== null) {
                project.submission = submission.trim();
                project.status = 'submitted';
                displaySelectedProject();
                displayStudentSubmissions();
                alert('Project submitted successfully!');
            }
        }

        function getGradeLetter(score) {
            for (const boundary of gradeBoundaries) {
                if (score >= boundary.minScore) {
                    return boundary.grade;
                }
            }
            return 'F';
        }

        function displayStudentSubmissions() {
            const studentSubmissionsDiv = document.getElementById('studentSubmissions');
            let content = '';
            assignments.forEach(assignment => {
                if (studentSubmissions[assignment.id]) {
                    content += `<h4>Assignment ID: ${assignment.id}</h4>`;
                    for (const student in studentSubmissions[assignment.id]) {
                        const submission = studentSubmissions[assignment.id][student];
                        content += `
                            <div class="project-card">
                                <p><strong>Student:</strong> ${student}</p>
                                <p><strong>Project Idea:</strong> ${submission.projectIdea}</p>
                                <p><strong>Status:</strong> <span class="${
                                    submission.status === 'submitted' ? 'status-submitted' : 
                                    submission.status === 'graded' ? 'status-graded' : 'status-pending'}">${
                                        submission.status === 'submitted' ? 'Submitted' : 
                                        submission.status === 'graded' ? 'Graded' : 'Pending'}</span></p>
                                ${submission.submission ? `<p><strong>Submission:</strong> ${submission.submission}</p>` : ''}
                                ${submission.status === 'submitted' && submission.grade === null ? 
                                    `<button class="btn" onclick="gradeSubmission('${assignment.id}', '${student}')">Grade Submission</button>` : ''}
                                ${submission.grade !== null ? `<p><strong>Grade:</strong> ${submission.grade}/100 (${getGradeLetter(submission.grade)})</p>` : ''}
                                ${submission.comments ? `<p><strong>Teacher's Comments:</strong> ${submission.comments}</p>` : ''}
                            </div>
                        `;
                    }
                }
            });
            studentSubmissionsDiv.innerHTML = content || '<p>No submissions yet.</p>';
        }

        function gradeSubmission(assignmentId, student) {
            const submission = studentSubmissions[assignmentId][student];
            const grade = prompt(`Enter grade for ${student}'s submission (out of 100):`, submission.grade !== null ? submission.grade : '');
            if (grade !== null && !isNaN(grade) && grade >= 0 && grade <= 100) {
                const comments = prompt(`Enter comments for ${student}'s submission:`, submission.comments || '');
                submission.grade = parseFloat(grade);
                submission.comments = comments;
                submission.status = 'graded';
                // Update student's project
                if (!studentProjects[student]) studentProjects[student] = {};
                studentProjects[student].grade = submission.grade;
                studentProjects[student].comments = submission.comments;
                studentProjects[student].status = 'graded';
                displayStudentSubmissions();
                displaySelectedProject();
                displayStudentAverageGrade();
                displayClassAverages();
                alert('Grade and comments saved.');
            } else {
                alert('Invalid grade entered.');
            }
        }

        function displayStudentAverageGrade() {
            if (users[currentUser].role !== 'student') return;
            const studentAverageGradeDiv = document.getElementById('studentAverageGrade');
            let totalGrade = 0;
            let count = 0;
            for (const assignmentId in studentSubmissions) {
                const submission = studentSubmissions[assignmentId][currentUser];
                if (submission && submission.grade !== null) {
                    totalGrade += submission.grade;
                    count++;
                }
            }
            const average = count > 0 ? (totalGrade / count).toFixed(2) : 'N/A';
            studentAverageGradeDiv.innerHTML = `<p><strong>Your Average Grade:</strong> ${average}${average !== 'N/A' ? '/100' : ''}</p>`;
        }

        function displayClassAverages() {
            if (users[currentUser].role !== 'teacher') return;
            const classAveragesDiv = document.getElementById('classAverages');
            let content = '';
            let totalClassGrade = 0;
            let totalSubmissions = 0;

            const studentAverages = {};

            for (const student in users) {
                if (users[student].role === 'student') {
                    let totalGrade = 0;
                    let count = 0;
                    for (const assignmentId in studentSubmissions) {
                        const submission = studentSubmissions[assignmentId][student];
                        if (submission && submission.grade !== null) {
                            totalGrade += submission.grade;
                            count++;
                        }
                    }
                    const average = count > 0 ? (totalGrade / count).toFixed(2) : 'N/A';
                    studentAverages[student] = average;
                    if (average !== 'N/A') {
                        totalClassGrade += parseFloat(average);
                        totalSubmissions++;
                    }
                }
            }

            content += '<h4>Student Averages:</h4>';
            content += '<ul>';
            for (const student in studentAverages) {
                content += `<li><strong>${student}:</strong> ${studentAverages[student]}${studentAverages[student] !== 'N/A' ? '/100' : ''}</li>`;
            }
            content += '</ul>';

            const classAverage = totalSubmissions > 0 ? (totalClassGrade / totalSubmissions).toFixed(2) : 'N/A';
            content += `<p><strong>Class Average:</strong> ${classAverage}${classAverage !== 'N/A' ? '/100' : ''}</p>`;

            classAveragesDiv.innerHTML = content;
        }

        // Display quotes on login page
        function displayLoginQuotes() {
            const quoteElement = document.getElementById('loginQuote');
            let index = 0;

            function showNextQuote() {
                quoteElement.textContent = quotes[index];
                index = (index + 1) % quotes.length;
            }

            showNextQuote();
            setInterval(showNextQuote, 10000); // Change quote every 10 seconds
        }

        // Initialize the login page quotes
        displayLoginQuotes();
    </script>
</body>
</html>
