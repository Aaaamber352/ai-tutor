<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>AI Learning Platform</title>
    <!-- Include Chart.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        /* CSS Code */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .header {
            position: relative;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .quote {
            font-style: italic;
            color: #6b7280;
            font-size: 16px;
            text-align: center;
            margin-top: 20px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            background-color: #2563eb;
            color: white;
            font-weight: 500;
        }

        .btn:hover {
            background-color: #1d4ed8;
        }

        .btn-secondary {
            background-color: #6b7280;
        }

        .btn-secondary:hover {
            background-color: #4b5563;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
        }

        .badge {
            padding: 4px 8px;
            border-radius: 9999px;
            font-size: 12px;
            font-weight: 500;
            background-color: #e5e7eb;
            margin-right: 4px;
            cursor: pointer;
        }

        .badge.selected {
            background-color: #2563eb;
            color: white;
        }

        .project-card {
            border: 1px solid #e5e7eb;
            border-radius: 4px;
            padding: 16px;
            margin-bottom: 16px;
        }

        .nav {
            display: flex;
            gap: 16px;
            margin-bottom: 20px;
            align-items: center;
            justify-content: space-between;
        }

        .nav-item {
            padding: 8px 16px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }

        .nav-item.active {
            border-bottom-color: #2563eb;
            font-weight: 500;
        }

        .chart-container {
            height: 400px;
            margin-bottom: 20px;
        }

        #loginForm {
            max-width: 400px;
            margin: 100px auto;
            position: relative;
        }

        .hidden {
            display: none;
        }

        /* Fade-in and fade-out animation */
        .fade-in-out {
            opacity: 0;
            animation: fadeInOut 10s infinite;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; }
            10% { opacity: 1; }
            50% { opacity: 1; }
            60% { opacity: 0; }
            100% { opacity: 0; }
        }

        .textarea {
            width: 100%;
            height: 200px;
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            margin-top: 8px;
        }

        .status-submitted {
            color: green;
            font-weight: bold;
        }

        .status-pending {
            color: orange;
            font-weight: bold;
        }

        .status-graded {
            color: blue;
            font-weight: bold;
        }

        .grade {
            font-weight: bold;
        }

        .comment {
            margin-top: 8px;
            padding: 8px;
            background-color: #f0f0f0;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <!-- HTML Code -->
    <div class="container">
        <!-- Login Form -->
        <div id="loginForm" class="card">
            <h2 style="margin-bottom: 20px;">AI Learning Platform</h2>
            <div class="form-group">
                <label>Username</label>
                <input type="text" id="username" placeholder="Enter username">
            </div>
            <div class="form-group">
                <label>Password</label>
                <input type="password" id="password" placeholder="Enter password">
            </div>
            <button class="btn" onclick="login()">Login</button>
            <div class="quote fade-in-out" id="loginQuote"></div>
        </div>

        <!-- Teacher Dashboard -->
        <div id="teacherDashboard" class="hidden">
            <div class="header">
                <h2>Teacher Dashboard</h2>
                <button class="btn btn-secondary" onclick="logout()">Logout</button>
            </div>
            <div id="teacherContent">
                <div class="card">
                    <h3>Create Assignment</h3>
                    <div class="form-group">
                        <label>Select Skills</label>
                        <div id="skillsList"></div>
                    </div>
                    <div class="form-group">
                        <label>Due Date</label>
                        <input type="date" id="dueDate">
                    </div>
                    <button class="btn" onclick="createAssignment()">Create Assignment</button>
                </div>
                <div class="card">
                    <h3>Assignments</h3>
                    <div id="assignmentsList"></div>
                </div>
                <div class="card">
                    <h3>Student Submissions</h3>
                    <div id="studentSubmissions"></div>
                </div>
            </div>
        </div>

        <!-- Student Dashboard -->
        <div id="studentDashboard" class="hidden">
            <div class="header">
                <h2>Student Dashboard</h2>
                <button class="btn btn-secondary" onclick="logout()">Logout</button>
            </div>
            <!-- Student Content -->
            <div id="studentContent">
                <div class="card">
                    <h3>Your Assignments</h3>
                    <div id="studentAssignmentsList"></div>
                </div>
                <!-- Project Ideas Section -->
                <div id="projectIdeasSection" class="hidden">
                    <div class="card">
                        <h3>Enter Your Topic</h3>
                        <div class="form-group">
                            <label>Topic</label>
                            <input type="text" id="studentTopic" placeholder="Enter your topic">
                        </div>
                        <button class="btn" onclick="generateProjects()">Generate Project Ideas</button>
                    </div>
                </div>
                <!-- Display Generated Projects -->
                <div id="displayProjectsSection" class="hidden">
                    <div class="card">
                        <h3>Project Ideas</h3>
                        <div id="projectsList"></div>
                    </div>
                </div>
                <!-- Selected Project -->
                <div id="selectedProjectSection" class="hidden">
                    <div class="card">
                        <h3>Your Selected Project</h3>
                        <div id="selectedProject"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // JavaScript Code

        // Sample data (in a real app, this would come from a backend)
        const users = {
            'teacher1': { password: 'pass123', role: 'teacher' },
            'student1': { password: 'pass123', role: 'student' },
            'student2': { password: 'pass123', role: 'student' }
        };

        const skills = [
            'Creative Writing',
            'Research Skills',
            'Critical Thinking',
            'Analysis',
            'Communication',
            'Problem Solving'
        ];

        const quotes = [
            'Education is the passport to the future, for tomorrow belongs to those who prepare for it today. - Malcolm X',
            'The beautiful thing about learning is that no one can take it away from you. - B.B. King',
            'The purpose of education is to replace an empty mind with an open one. - Malcolm Forbes',
            'The mind is not a vessel to be filled but a fire to be ignited. - Plutarch',
            'Education is not preparation for life; education is life itself. - John Dewey'
        ];

        const gradeBoundaries = [
            { grade: 'A*', minScore: 90 },
            { grade: 'A', minScore: 80 },
            { grade: 'B', minScore: 70 },
            { grade: 'C', minScore: 60 },
            { grade: 'D', minScore: 50 },
            { grade: 'E', minScore: 40 },
            { grade: 'F', minScore: 0 }
        ];

        let selectedSkills = [];
        let currentUser = null;
        let assignments = [];
        let selectedAssignment = null;
        let studentProjects = {}; // Store student's selected projects and submissions
        let studentSubmissions = {}; // For teacher to view student submissions

        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (users[username] && users[username].password === password) {
                currentUser = username;
                document.getElementById('loginForm').classList.add('hidden');

                if (users[username].role === 'teacher') {
                    initializeTeacherDashboard();
                } else {
                    initializeStudentDashboard();
                }
            } else {
                alert('Invalid credentials');
            }
        }

        function logout() {
            currentUser = null;
            document.getElementById('teacherDashboard').classList.add('hidden');
            document.getElementById('studentDashboard').classList.add('hidden');
            document.getElementById('loginForm').classList.remove('hidden');
        }

        function initializeSkillsList() {
            const skillsList = document.getElementById('skillsList');
            skillsList.innerHTML = skills.map(skill => 
                `<span class="badge" onclick="toggleSkill('${skill}')">${skill}</span>`
            ).join('');
        }

        function toggleSkill(skill) {
            const index = selectedSkills.indexOf(skill);
            if (index === -1) {
                selectedSkills.push(skill);
            } else {
                selectedSkills.splice(index, 1);
            }
            updateSkillBadges();
        }

        function updateSkillBadges() {
            document.querySelectorAll('.badge').forEach(badge => {
                if (selectedSkills.includes(badge.textContent)) {
                    badge.classList.add('selected');
                } else {
                    badge.classList.remove('selected');
                }
            });
        }

        function initializeTeacherDashboard() {
            document.getElementById('teacherDashboard').classList.remove('hidden');
            initializeSkillsList();
            displayAssignments();
            displayStudentSubmissions();
        }

        function createAssignment() {
            const dueDate = document.getElementById('dueDate').value;
            if (selectedSkills.length === 0 || !dueDate) {
                alert('Please select skills and due date');
                return;
            }
            const assignment = {
                id: assignments.length + 1,
                skills: [...selectedSkills],
                dueDate: dueDate
            };
            assignments.push(assignment);
            selectedSkills = [];
            updateSkillBadges();
            document.getElementById('dueDate').value = '';
            displayAssignments();
            alert('Assignment created successfully!');
        }

        function displayAssignments() {
            const assignmentsList = document.getElementById('assignmentsList');
            if (assignments.length === 0) {
                assignmentsList.innerHTML = '<p>No assignments created yet.</p>';
                return;
            }
            assignmentsList.innerHTML = assignments.map(assignment => `
                <div class="project-card">
                    <p><strong>Assignment ID:</strong> ${assignment.id}</p>
                    <p><strong>Skills:</strong> ${assignment.skills.join(', ')}</p>
                    <p><strong>Due Date:</strong> ${assignment.dueDate}</p>
                </div>
            `).join('');
        }

        function initializeStudentDashboard() {
            document.getElementById('studentDashboard').classList.remove('hidden');
            displayStudentAssignments();
            displaySelectedProject();
        }

        function displayStudentAssignments() {
            const studentAssignmentsList = document.getElementById('studentAssignmentsList');
            if (assignments.length === 0) {
                studentAssignmentsList.innerHTML = '<p>No assignments available at the moment.</p>';
                return;
            }
            studentAssignmentsList.innerHTML = assignments.map(assignment => `
                <div class="project-card">
                    <p><strong>Assignment ID:</strong> ${assignment.id}</p>
                    <p><strong>Skills:</strong> ${assignment.skills.join(', ')}</p>
                    <p><strong>Due Date:</strong> ${assignment.dueDate}</p>
                    ${studentProjects[currentUser] && studentProjects[currentUser].assignmentId === assignment.id ? 
                        '<p><em>Already Selected</em></p>' :
                        `<button class="btn" onclick="selectAssignment(${assignment.id})">Start Assignment</button>`
                    }
                </div>
            `).join('');
        }

        function selectAssignment(id) {
            selectedAssignment = assignments.find(a => a.id === id);
            document.getElementById('projectIdeasSection').classList.remove('hidden');
            document.getElementById('displayProjectsSection').classList.add('hidden');
            document.getElementById('studentTopic').value = '';
            window.scrollTo(0, document.body.scrollHeight);
        }

        function generateProjects() {
            const topic = document.getElementById('studentTopic').value;
            if (!topic) {
                alert('Please enter a topic');
                return;
            }
            const projectIdeas = generateProjectIdeas(topic);
            displayProjectIdeas(projectIdeas);
        }

        function generateProjectIdeas(topic) {
            const ideaTemplates = [
                `Write a creative short story involving ${topic}, focusing on character development and plot twists.`,
                `Develop a comprehensive research paper on ${topic}, including its historical context and future implications.`,
                `Create a multimedia presentation about ${topic}, utilizing visual aids and interactive elements.`,
                `Design an experiment or survey to gather data on ${topic}, and analyze the results.`,
                `Compose a persuasive essay on ${topic}, arguing for a particular viewpoint.`,
                `Build a physical or digital model that represents aspects of ${topic}, explaining its features and significance.`,
                `Conduct an interview with an expert on ${topic}, and present your findings.`,
                `Produce a documentary-style video exploring different facets of ${topic}.`,
                `Develop a series of blog posts or articles educating others about ${topic}.`,
                `Create a podcast episode discussing the importance of ${topic} in today's society.`,
                `Formulate a business plan or proposal related to ${topic}, outlining potential benefits and challenges.`,
                `Organize a community event or workshop centered around ${topic}, and document the process.`,
                `Write a critical analysis of how ${topic} is portrayed in media and literature.`,
                `Develop an app or website that provides information or services related to ${topic}.`,
                `Create an art project (painting, sculpture, etc.) inspired by ${topic}, and explain your artistic choices.`,
            ];

            // Randomly select three unique ideas
            const selectedIdeas = [];
            while (selectedIdeas.length < 3) {
                const randomIndex = Math.floor(Math.random() * ideaTemplates.length);
                const idea = ideaTemplates[randomIndex];
                if (!selectedIdeas.includes(idea)) {
                    selectedIdeas.push(idea);
                }
            }

            return selectedIdeas;
        }

        function displayProjectIdeas(ideas) {
            const projectsList = document.getElementById('projectsList');
            projectsList.innerHTML = ideas.map((idea, i) => `
                <div class="project-card">
                    <h3>Project Option ${i + 1}</h3>
                    <p>${idea}</p>
                    <button class="btn" onclick="selectProject(${i}, '${idea.replace(/'/g, "\\'")}')">Choose This Project</button>
                </div>
            `).join('');
            document.getElementById('displayProjectsSection').classList.remove('hidden');
            window.scrollTo(0, document.body.scrollHeight);
        }

        function selectProject(index, idea) {
            alert(`Project Option ${index + 1} selected!`);
            // Save the selected project for the student
            studentProjects[currentUser] = {
                assignmentId: selectedAssignment.id,
                projectIdea: idea,
                submission: '',
                status: 'pending',
                grades: null,
                comments: null
            };
            // Update the teacher's view of student submissions
            if (!studentSubmissions[selectedAssignment.id]) {
                studentSubmissions[selectedAssignment.id] = {};
            }
            studentSubmissions[selectedAssignment.id][currentUser] = studentProjects[currentUser];
            displaySelectedProject();
            displayStudentAssignments();
            displayStudentSubmissions();
            // Hide project ideas sections
            document.getElementById('projectIdeasSection').classList.add('hidden');
            document.getElementById('displayProjectsSection').classList.add('hidden');
            window.scrollTo(0, 0);
        }

        function displaySelectedProject() {
            const selectedProjectSection = document.getElementById('selectedProjectSection');
            if (studentProjects[currentUser]) {
                selectedProjectSection.classList.remove('hidden');
                const project = studentProjects[currentUser];
                selectedAssignment = assignments.find(a => a.id === project.assignmentId);
                const selectedProject = document.getElementById('selectedProject');
                selectedProject.innerHTML = `
                    <p><strong>Assignment ID:</strong> ${project.assignmentId}</p>
                    <p><strong>Project Idea:</strong> ${project.projectIdea}</p>
                    <p><strong>Status:</strong> <span class="${
                        project.status === 'submitted' ? 'status-submitted' : 
                        project.status === 'graded' ? 'status-graded' : 'status-pending'}">${
                            project.status === 'submitted' ? 'Submitted' : 
                            project.status === 'graded' ? 'Graded' : 'Pending'}</span></p>
                    ${project.status === 'graded' ? displayGradesAndComments(project) : ''}
                    ${project.status !== 'graded' ? `<button class="btn" onclick="openSubmission()">Submit Project</button>` : ''}
                `;
            } else {
                selectedProjectSection.classList.add('hidden');
            }
        }

        function openSubmission() {
            const project = studentProjects[currentUser];
            const submission = prompt('Paste your project submission below:', project.submission || '');
            if (submission !== null) {
                project.submission = submission;
                project.status = 'submitted';
                displaySelectedProject();
                displayStudentSubmissions();
                alert('Project submitted successfully!');
                // Simulate AI grading
                gradeSubmission(project);
            }
        }

        function gradeSubmission(project) {
            // Simulate grading by assigning random scores and comments
            project.grades = {};
            project.comments = {};
            let totalScore = 0;
            project.assignmentSkills = assignments.find(a => a.id === project.assignmentId).skills;
            project.assignmentSkills.forEach(skill => {
                const score = Math.floor(Math.random() * 31) + 70; // Random score between 70 and 100
                totalScore += score;
                project.grades[skill] = score;
                project.comments[skill] = generateComment(skill, score);
            });
            project.overallGrade = Math.round(totalScore / project.assignmentSkills.length);
            project.gradeLetter = getGradeLetter(project.overallGrade);
            project.status = 'graded';
            displaySelectedProject();
            displayStudentSubmissions();
            alert('Your project has been graded!');
        }

        function generateComment(skill, score) {
            if (score >= 90) {
                return `Excellent demonstration of ${skill}. Your work is outstanding.`;
            } else if (score >= 80) {
                return `Very good performance in ${skill}. You have a strong understanding.`;
            } else if (score >= 70) {
                return `Good effort in ${skill}, but there's room for improvement.`;
            } else if (score >= 60) {
                return `Fair attempt at ${skill}, consider reviewing key concepts.`;
            } else if (score >= 50) {
                return `Needs improvement in ${skill}. Additional practice is recommended.`;
            } else {
                return `Significant improvement needed in ${skill}. Please seek assistance.`;
            }
        }

        function getGradeLetter(score) {
            for (const boundary of gradeBoundaries) {
                if (score >= boundary.minScore) {
                    return boundary.grade;
                }
            }
            return 'F';
        }

        function displayGradesAndComments(project) {
            let content = `<p><strong>Overall Grade:</strong> ${project.overallGrade}/100 (${project.gradeLetter})</p>`;
            project.assignmentSkills.forEach(skill => {
                content += `
                    <div class="comment">
                        <p><strong>${skill}:</strong> ${project.grades[skill]}/100 (${getGradeLetter(project.grades[skill])})</p>
                        <p>${project.comments[skill]}</p>
                    </div>
                `;
            });
            return content;
        }

        function displayStudentSubmissions() {
            const studentSubmissionsDiv = document.getElementById('studentSubmissions');
            let content = '';
            assignments.forEach(assignment => {
                if (studentSubmissions[assignment.id]) {
                    content += `<h4>Assignment ID: ${assignment.id}</h4>`;
                    for (const student in studentSubmissions[assignment.id]) {
                        const submission = studentSubmissions[assignment.id][student];
                        content += `
                            <div class="project-card">
                                <p><strong>Student:</strong> ${student}</p>
                                <p><strong>Project Idea:</strong> ${submission.projectIdea}</p>
                                <p><strong>Status:</strong> <span class="${
                                    submission.status === 'submitted' ? 'status-submitted' : 
                                    submission.status === 'graded' ? 'status-graded' : 'status-pending'}">${
                                        submission.status === 'submitted' ? 'Submitted' : 
                                        submission.status === 'graded' ? 'Graded' : 'Pending'}</span></p>
                                ${submission.status === 'graded' ? displayGradesAndComments(submission) : ''}
                                ${submission.submission ? `<p><strong>Submission:</strong> ${submission.submission}</p>` : ''}
                            </div>
                        `;
                    }
                }
            });
            studentSubmissionsDiv.innerHTML = content || '<p>No submissions yet.</p>';
        }

        // Display quotes on login page
        function displayLoginQuotes() {
            const quoteElement = document.getElementById('loginQuote');
            let index = 0;

            function showNextQuote() {
                quoteElement.textContent = quotes[index];
                index = (index + 1) % quotes.length;
            }

            showNextQuote();
            setInterval(showNextQuote, 10000); // Change quote every 10 seconds
        }

        // Initialize the login page quotes
        displayLoginQuotes();
    </script>
</body>
</html>
